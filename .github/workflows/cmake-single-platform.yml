name: CMake on a single platform

on:
  push:
  pull_request:

jobs:
  build-and-run:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Release]
    container:
      image: nvcr.io/nvidia/tensorrt:23.09-py3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Pre-configure tzdata
        run: |
          export DEBIAN_FRONTEND=noninteractive
          export TZ=America/Los_Angeles
          ln -fs /usr/share/zoneinfo/$TZ /etc/localtime
          apt-get update
          apt-get install -y tzdata
          dpkg-reconfigure --frontend noninteractive tzdata

      - name: Cache apt dependencies
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('apt_dependencies.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install dependencies
        if: steps.cache-opencv.outputs.cache-hit != 'true' || steps.cache-eigen.outputs.cache-hit != 'true'
        run: |
          apt-get update
          xargs -a apt_dependencies.txt apt-get install -y --no-install-recommends

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Cache Docker layers
      #   uses: actions/cache@v3
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-

      # - name: Build with Docker Buildx
      #   run: |
      #     docker buildx build --push \
      #     --cache-from=type=local,src=/tmp/.buildx-cache \
      #     --cache-to=type=local,dest=/tmp/.buildx-cache \
      #     --file Dockerfile \
      #     --tag my-image:latest .

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{ matrix.build_type }}

      - name: List directory contents
        run: ls -l

      - name: List GitHub workspace contents
        run: ls -l ${{github.workspace}}

      - name: Run the code
        run: |
          sh ${{github.workspace}}/build/bin/botsort_tracking_example ${{github.workspace}}/config/tracker.ini 
            ${{github.workspace}}/config/gmc.ini ${{github.workspace}}/config/reid.ini ${{github.workspace}}/assets/osnet_x0_25_market1501.onnx
            ${{github.workspace}}/examples/data/MOT20-01.mp4 ${{github.workspace}}/examples/data/det/det.txt ${{github.workspace}}/outputs
